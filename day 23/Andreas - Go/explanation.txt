0		set b 67
1		set c b
2		jnz a 2       //instr 4
3		jnz 1 5       //instr 8
4		mul b 100
6		sub b -100000
7		set c b
8		sub c -17000
9		set f 1					//prime flag

10		set d 2
11		set e 2
						=> map[c:123700 f:1 d:2 e:2 a:1 b:106700]

//first loop for each value of e from 2 -> b check if there is an d so that d*e = b => no prime
12		set g d
13		mul g e
14		sub g b
15		jnz g 2      //instr 17 => d * e == b ?
16		set f 0		 d*e == b => divisor found ! => f = 0 a.k.a. no prime

17		sub e -1    //increase e
18		set g e
19		sub g b
20		jnz g -8     //instr 12  e == b => contrinue => increase d & set e to 2
//first loop => e : 2->b


21		sub d -1    //increase d => after looping over all e values
22		set g d
23		sub g b
24		jnz g -13    //instr 11   g == 0 => b = d  => 
//second loop d: 2 -> b

//these two loops are equivalent to

for e := 2 ; e < b ; e++ {
	for d := 2 ; d < b ; d++ {
		d*e = b ? => flag = 0 b is not a prime !
	}
}



25		jnz f 2	     //instr 27    
26		sub h -1     //h++ if f = 0 so not a prime !

27		set g b						g <- b
28		sub g c				        g == c => done  instr before => g = b done ! => loop between  b & c
29		jnz g 2      //instr 30
30		jnz 1 3		 //instr 32     => done if we get here !, we get here if g == 0(no jump line before) 
								=> thet happens if b == c

31		sub b -17    //b+= 17
32		jnz 1 -23    //instr 9 => reset flag 




This code answers the question 
how many non prime numbers are there between b & c ?

double loop is inefficient because it loops all e,d values
it could
	1. stop once the numbers is flagged as not being prime
	2. d<e condition => d*e == b then e*d also == b
